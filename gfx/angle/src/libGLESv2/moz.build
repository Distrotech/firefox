# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Target: 'preprocessor'
# src/compiler/preprocessor:
SOURCES += ['../compiler/preprocessor/' + src for src in [
    'DiagnosticsBase.cpp',
    'DirectiveHandlerBase.cpp',
    'DirectiveParser.cpp',
    'ExpressionParser.cpp',
    'Input.cpp',
    'Lexer.cpp',
    'Macro.cpp',
    'MacroExpander.cpp',
    'Preprocessor.cpp',
    'Token.cpp',
    'Tokenizer.cpp',
]]

# Target: 'translator_common'
#   Requires: 'preprocessor'
# src/compiler:
SOURCES += ['../compiler/' + src for src in [
    'BuiltInFunctionEmulator.cpp',
    'Compiler.cpp',
    'compiler_debug.cpp',
    'CompilerUniform.cpp',
    'DetectCallDepth.cpp',
    'Diagnostics.cpp',
    'DirectiveHandler.cpp',
    'ForLoopUnroll.cpp',
    'glslang_lex.cpp',
    'glslang_tab.cpp',
    'InfoSink.cpp',
    'Initialize.cpp',
    'InitializeDll.cpp',
    'InitializeParseContext.cpp',
    'Intermediate.cpp',
    'intermOut.cpp',
    'IntermTraverse.cpp',
    'MapLongVariableNames.cpp',
    'parseConst.cpp',
    'ParseHelper.cpp',
    'PoolAlloc.cpp',
    'QualifierAlive.cpp',
    'RemoveTree.cpp',
    'SymbolTable.cpp',
    'util.cpp',
    'ValidateLimitations.cpp',
    'VariableInfo.cpp',
    'VariablePacker.cpp',
]]

# src/compiler/depgraph:
SOURCES += ['../compiler/depgraph/' + src for src in [
    'DependencyGraph.cpp',
    'DependencyGraphBuilder.cpp',
    'DependencyGraphOutput.cpp',
    'DependencyGraphTraverse.cpp',
]]

# src/compiler/timing:
SOURCES += ['../compiler/timing/' + src for src in [
    'RestrictFragmentShaderTiming.cpp',
    'RestrictVertexShaderTiming.cpp',
]]

# src/third_party/compiler:
SOURCES += ['../third_party/compiler/' + src for src in [
    'ArrayBoundsClamper.cpp',
]]

# src/third_party/murmurhash:
SOURCES += ['../third_party/murmurhash/' + src for src in [
    'MurmurHash3.cpp',
]]

if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'windows':
    SOURCES += [
        '../compiler/ossource_win.cpp',
    ]
else:
    SOURCES += [
        '../compiler/ossource_posix.cpp',
    ]

# Target: 'translator_hlsl'
#   Requires: 'translator_common'
# src/compiler:
SOURCES += ['../compiler/' + src for src in [
    'CodeGenHLSL.cpp',
    'DetectDiscontinuity.cpp',
    'OutputHLSL.cpp',
    'SearchSymbol.cpp',
    'ShaderLang.cpp',
    'TranslatorHLSL.cpp',
    'UnfoldShortCircuit.cpp',
]]

# Target: 'libGLESv2'
#   Requires: 'translator_hlsl'
# src/common:
SOURCES += ['../common/' + src for src in [
    'debug.cpp',
    'RefCountObject.cpp',
]]

# src/libGLESv2:
SOURCES += [
    'Buffer.cpp',
    'Context.cpp',
    'Fence.cpp',
    'Float16ToFloat32.cpp',
    'Framebuffer.cpp',
    'HandleAllocator.cpp',
    'libGLESv2.cpp',
    'main.cpp',
    'precompiled.cpp',
    'Program.cpp',
    'ProgramBinary.cpp',
    'Query.cpp',
    'Renderbuffer.cpp',
    'ResourceManager.cpp',
    'Shader.cpp',
    'Texture.cpp',
    'Uniform.cpp',
    'utilities.cpp',
]

# src/libGLESv2/renderer:
SOURCES += ['renderer/' + src for src in [
    'Blit.cpp',
    'BufferStorage.cpp',
    'BufferStorage11.cpp',
    'BufferStorage9.cpp',
    'Fence11.cpp',
    'Fence9.cpp',
    'Image.cpp',
    'Image11.cpp',
    'Image9.cpp',
    'ImageSSE2.cpp',
    'IndexBuffer.cpp',
    'IndexBuffer11.cpp',
    'IndexBuffer9.cpp',
    'IndexDataManager.cpp',
    'IndexRangeCache.cpp',
    'InputLayoutCache.cpp',
    'Query11.cpp',
    'Query9.cpp',
    'Renderer.cpp',
    'Renderer11.cpp',
    'renderer11_utils.cpp',
    'Renderer9.cpp',
    'renderer9_utils.cpp',
    'RenderStateCache.cpp',
    'RenderTarget11.cpp',
    'RenderTarget9.cpp',
    'ShaderExecutable11.cpp',
    'ShaderExecutable9.cpp',
    'SwapChain11.cpp',
    'SwapChain9.cpp',
    'TextureStorage.cpp',
    'TextureStorage11.cpp',
    'TextureStorage9.cpp',
    'VertexBuffer.cpp',
    'VertexBuffer11.cpp',
    'VertexBuffer9.cpp',
    'VertexDataManager.cpp',
    'VertexDeclarationCache.cpp',
]]

# On Windows, we don't automatically get "lib" prepended, but we need it.
LIBRARY_NAME = 'libGLESv2'

FORCE_SHARED_LIB = True

LOCAL_INCLUDES += [
    '..',
    '../../include',
    '../../include/KHR',
]


for var in ('LIBGLESV2_EXPORTS', 'ANGLE_BUILD', 'NOMINMAX',
            '_CRT_SECURE_NO_DEPRECATE', 'ANGLE_DISABLE_TRACE',
            'COMPILER_IMPLEMENTATION'):
    DEFINES[var] = True

if not CONFIG['MOZ_DEBUG']:
    DEFINES['_SECURE_SCL'] = 0

DEFINES['ANGLE_COMPILE_OPTIMIZATION_LEVEL'] = 'D3DCOMPILE_OPTIMIZATION_LEVEL1'
